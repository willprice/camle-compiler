module Language.Camle.Examples.AbstractSyntaxTree where

import Language.Camle.Data.AbstractSyntaxTree

test0 = Program [Read (VarName "max"),WriteExpression (ETerm (Var "max")),WriteString "\n",Assign (VarName "num") (BinOp Plus (BinOp Times (BinOp Minus (BinOp Times (ETerm (Constant 331)) (ETerm (Var "max"))) (ETerm (Constant 3))) (ETerm (Constant 2))) (ETerm (Var "max"))),Assign (VarName "i1") (BinOp Minus (ETerm (Constant 0)) (ETerm (Constant 4))),Read (VarName "i2"),If (BooleanExpression (BNegate (BBinOp Equal (ETerm (Var "num")) (ETerm (Var "max"))))) (Statements [Assign (VarName "limit") (ETerm (Var "num")),If (BooleanExpression (BTerm (BBinOp LessThanEqual (BinOp Minus (ETerm (Constant 0)) (ETerm (Var "max"))) (ETerm (Var "num"))))) (WriteExpression (BinOp Plus (ETerm (Constant 3)) (BinOp Times (ETerm (Var "max")) (ETerm (Constant 2))))) Skip]) (Statements [While (BooleanExpression (BTerm (BBinOp LessThanEqual (ETerm (Var "i1")) (BinOp Minus (BinOp Times (ETerm (Constant 2)) (ETerm (Var "i2"))) (ETerm (Constant 1)))))) (If (BAnd [BTerm (BBinOp LessThanEqual (BinOp Times (ETerm (Var "alongname")) (ETerm (Constant 2))) (ETerm (Var "i1"))),BNegate (BBinOp Equal (BinOp Times (ETerm (Var "alongname")) (ETerm (Constant 2))) (ETerm (Var "i1")))]) (Assign (VarName "max") (BinOp Times (ETerm (Var "max")) (ETerm (Constant 3)))) Skip),Assign (VarName "alongname") (ETerm (Var "max"))]),While (BAnd [BTerm (BBinOp LessThanEqual (ETerm (Var "i1")) (ETerm (Var "limit"))),BNegate (BBinOp Equal (ETerm (Var "i1")) (ETerm (Var "limit")))]) (Statements [If (BooleanExpression (BTerm (BBinOp Equal (ETerm (Var "i1")) (ETerm (Var "i2"))))) (WriteString "yes") Skip,Assign (VarName "i1") (BinOp Plus (ETerm (Var "i1")) (ETerm (Constant 1)))])]
